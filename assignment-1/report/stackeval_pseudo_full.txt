main(String query, String fileName){

	rootNode <- new InputHandler(query).parseQuery();
	s <- new StackEval(rootNode);
	parse fileName using s as ContentHandler;

}

StackEval{

	int currentPre = 1;
	Stack<Integer> preOfOpenNodes = new Stack<Integer>();
	Map<Integer, String> nodeStrings = new HashMap<Integer, String>();
	Map<Integer, Match> resultsMap = new HashMap<Integer, Match>();

	StackEval(PatternNode root){
		this.rootStack <- new TPEStack(root);
		Initialize TPEStacks of descendants of root;
	}

	startDocument(){
		//EMPTY: initializing the necessary stacks is performed in the constructor
	}

	startElement(String nameSpaceURI, String localName, String rawName, Attributes attributes){
		for (TPEStack s : rootStack.getDescendantStacks()) {
			PatternNode p = s.getPatternNode();
			TPEStack spar = s.getSpar();
			if (rawName.equals(p.getName()) || p.isWildcard()) {
				if (spar == null) {
					Match m = new Match(currentPre, null, s);
					resultsMap.put(currentPre, m);
					s.push(m);
				} else if (spar.top() != null && spar.top().getState() == 1) {
					Match m = new Match(currentPre, spar.top(), s);
					spar.top().addChild(s.getPatternNode(), m);
					// create a match satisfying the ancestor conditions of
					// query node s.p
					resultsMap.put(currentPre, m);
					s.push(m);
				}
			}
		}
		// Attributes part
		for (int i = 0; i < attributes.getLength(); i++) {
			// similarly look for query nodes possibly matched
			// by the attributes of the currently started element
			for (TPEStack s : rootStack.getDescendantStacks()) {
				PatternNode p = s.getPatternNode();
				TPEStack spar = s.getSpar();
				if (attributes.getLocalName(i).equals(p.getName())
						&& (spar == null || spar.verifyTopMatch())) {
					Match ma;
					if (spar == null) {
						ma = new Match(currentPre, null, s);
					} else {
						ma = new Match(currentPre, spar.top(), s);
						spar.top().addChild(p, ma);
					}
					nodeStrings.put(currentPre, attributes.getValue(i));
					ma.close();
					s.push(ma);
				}
			}
		}
		preOfOpenNodes.push(currentPre);
		currentPre++;
	}
	
	endElement(String nameSpaceURI, String localName, String rawName) {
	// we need to find out if the element ending now corresponded
		// to matches in some stacks
		// first, get the pre number of the element that ends now:
		int preOflastOpen = preOfOpenNodes.pop();

		// set this element's parent
		if (!preOfOpenNodes.isEmpty()) {
			results.getResult(preOflastOpen).setParentId(preOfOpenNodes.peek());
			results.getResult(preOflastOpen).setName(rawName);
		}

		// now look for Match objects having this pre number:
		for (TPEStack s : rootStack.getDescendantStacks()) {
			PatternNode p = s.getPatternNode();
			// Only check last 2 if s.top() is not null
			if ((p.getName().equals(rawName) || p.isWildcard())
					&& s.verifyTopMatch() && s.top().getPre() == preOflastOpen) {
				// all descendants of this Match have been traversed by now.
				Match m = s.top();
				Result r1 = results.getResult(m.getPre());
				if (r1 != null) {
					r1.setName(rawName);
					if (p.isQueried()) {
						r1.setQueried(true);
					}
				}
				m.close();

				// Check for the value of the node
				String value = m.getSt().getPatternNode().getValue();
				if (!value.isEmpty()
						&& !value.equals(nodeStrings.get(m.getPre()))) {
					resultsMap.remove(m.getPre());
					remove(m, s);

					if (r1 != null) {
						r1.setQueried(false);
					}
					if (m.getParent() != null) {
						m.getParent().removeChild(s.getPatternNode(), m);
					}
				}

				// check if m has child matches for all children of its pattern
				// node
				for (PatternNode pChild : p.getChildren()) {
					// pChild is a child of the query node for which m was
					// created
					if (!pChild.isOptional()
							&& (m.getChildren().get(pChild) == null || m
									.getChildren().get(pChild).size() == 0)) {
						// m lacks a child Match for the pattern node pChild
						// we remove m from its Stack, detach it from its parent
						remove(m, s);
						if (r1 != null) {
							r1.setQueried(false);
						}
						resultsMap.remove(m.getPre());
						if (m.getParent() != null) {
							m.getParent().removeChild(s.getPatternNode(), m);
						}
					}
				}
				m.close();
			}
		}
	}
	
	endDocument(){
	
		finalResults <- new ResultList();
		
			for(Integer i : resultsMap.keySet()){ 
				if(results.get(i) exists and is Queried){
					add results.get(i) to finalResults;
				}
			}
			
		finalResults.sortByID();
		
		print result of the query in the form of a table and/or XML file;
	
	}
}

TPEStack{
	...
	public boolean verifyTopMatch() {
		if (!matches.isEmpty())
			return (matches.peek().getState() == 1);
		else
			return false;
	}
	...
}

	
	
	
	




}